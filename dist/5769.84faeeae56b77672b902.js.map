{"version":3,"file":"5769.84faeeae56b77672b902.js","mappings":"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0BC,EAAAA,EAAAA,KAA+BriG,EAAQuB,GACjE4/F,gCACAC,oCACAkB,cAAe7sF,QAAQ+C,GAAc+pF,cACrCC,oBAAoBh6D,EAAAA,EAAAA,KAA+BxoC,EAAQ,kBAC3Ds+F,eACAtR,eACAyV,kBAAmBvQ,IAAmB/gE,gBACjCysE,GAAe8E,gBAAkBxQ,IAAmBtM,iBACpDgY,GAAe+E,mBAAqBzQ,IAAmBxM,gBAC5Dkd,mBAAoB5iG,EAAO4uB,SAAS4tB,MAAMomD,sBACtC7/F,GAAc,CAAEgvF,gBAAgB8Q,EAAAA,EAAAA,KAAqB7iG,EAAQgB,EAA6B,cAApBmY,OAC5C,iBAAnBmpE,IAA+B,CAAEA,sBACxCyd,IAAa,CACfE,kBACAC,oBACA11F,uBACA21F,iBAEH,GA5Le5zC,EA3nCuBu2C,EACzC9hG,UACA+hG,+BACA7jB,gCACAyc,gCACAzxB,QACA4K,YACAgpB,aACAD,iBACAmF,aACA5Q,YACA6Q,kBACAC,cACAlF,iBACAl3E,YACAq8E,gBACAC,yBACArF,wBACAmE,iBACAC,kBACAkB,eACAxoE,QACA2jE,kBACA3sD,SACA6sD,gBACAC,eACAtiE,YACAwiE,cACAK,kBACAlpF,eACAopF,qBACAG,4BACAC,mBACAI,aACAH,iBACAI,cACA9N,iBACAzP,iBACA16C,oBACA66D,oBACA1mB,cACA0lB,kBACA1B,YACAE,iBACAE,eACAD,mBACA11F,uBACA+zF,gBACA3tB,kBACAstB,iBACAh2B,aACAz+B,WACAqyC,YACAskB,aACAG,iBACAC,uBACAe,sBACAe,iBACAzmB,kBACA3N,cACAyzB,mBACA37F,YACA46F,mBACA55D,sBACAiC,mBACAh+B,2BACAkO,mBACA0oF,gBACAn1F,YACAo2E,iBACA6D,oBACAmb,oBACAE,sBACAD,yBACA7P,qBACA2O,qBACAyC,wBACA1E,qBACAmC,gBACAD,gBACAG,oBACAI,0BACAe,4BACAjB,gCACAC,oCACAoB,sBACAlE,gBACAtR,eACA7Q,yBACAymB,sBACAW,kCAEA,MAAM,uBACJluD,GAAsB,qBACtBuxC,GAAoB,uBACpBrx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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: threadId });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? {};\n\n  if (threadInfo && threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<number>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, partition, split, unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isChatChannel,\n  isDeletedUser,\n  isLocalMessageId,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const draftReplyInfo = !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    userId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: translate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: number; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (isDeepLink(urlWithProtocol)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountChats, accountUsers, globalChats, globalUsers,\n      } = result;\n\n      if (accountChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...accountChats, ...globalChats], 'id'));\n      }\n\n      if (accountUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...accountUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: accountChats.map(({ id }) => id),\n          userIds: accountChats.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          currentChat,\n          activeThreadId,\n          activeThreadId !== MAIN_THREAD_ID ? activeThreadId : undefined,\n        ),\n        activeThreadId !== MAIN_THREAD_ID ? callApi('fetchDiscussionMessage', {\n          chat: currentChat,\n          messageId: activeThreadId,\n        }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (resultDiscussion) {\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          resultDiscussion.threadInfoUpdates.forEach((update) => {\n            global = updateThreadInfo(global, currentChatId, activeThreadId, update);\n          });\n        }\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, offsetId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: offsetId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { accountUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (accountUsers.length) {\n      global = addUsers(global, buildCollectionByKey(accountUsers, 'id'));\n      localUserIds = accountUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport { addChats, addUsers, removeBlockedUser } from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot, selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectDraft,\n  selectIsTrustedBot, selectMessageReplyInfo, selectSendAs, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError, isChatChannel } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: String(month.amount),\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatChannel(chat)) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostsListResult, boostStatusResult] = await Promise.all([\n    callApi('fetchBoostsList', { chat }),\n    callApi('fetchBoostsStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostsListResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(boostsListResult.users, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      boosters: boostsListResult.boosters,\n      boosterIds: boostsListResult.boosterIds,\n      count: boostsListResult.count,\n      nextOffset: boostsListResult.nextOffset,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      boosters: {\n        ...tabState.boostStatistics.boosters,\n        ...result.boosters,\n      },\n      boosterIds: unique([...tabState.boostStatistics.boosterIds || [], ...result.boosterIds]),\n      count: result.count,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  let tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n\n  const newStatusResult = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!newStatusResult) {\n    return;\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal?.boostStatus) return;\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      boostStatus: newStatusResult,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getMessageKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views\n      .filter((view): view is ApiStoryView => 'date' in view)\n      .map((view) => view.peerId);\n    global = updatePeerStoryViews(global, peerId, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (selectPeerStories(global, previousPeerId)?.orderedIds.length || 1) - 1;\n  }\n\n  const previousStoryId = selectPeerStories(global, previousPeerId)?.[storySourceProp]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = selectPeerStories(global, nextPeerId)?.[storySourceProp]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments || (message.content.text && !currentAlbum.mainMessage.hasComments)) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.senderUserId !== nextMessage.forwardInfo?.senderUserId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getPeerIdDividend } from '../../global/helpers';\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getPeerIdDividend(userId) + getPeerIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\",\"image\":\"ZAL3vluMFRM8wd30wuzL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n  const dpr = useDevicePixelRatio();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / dpr,\n    height: botInfoDimensions.height / dpr,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SP9ygrz63JLi4xNqwoVE\",\"title\":\"Sw5A_K0ZxEX96Ui9lFCb\",\"sticker\":\"pukATZ25wuRwIprQiql9\",\"resultSticker\":\"H2SUn_dQhJ_DlaoIRrLs\",\"count\":\"SgtGraFRcPrLtRnxw3gt\",\"section\":\"phMVInVgl42PoTFQfGqI\",\"description\":\"Vb0eOjCRZWXBFSaUyvx2\",\"peers\":\"amBRnJ97D6pMr6DVxU_m\",\"peer\":\"uJ9T4Pwgeb_rBIAXBpse\",\"button\":\"NFt5nDqi5BykWcvrsjtU\",\"result\":\"N2jtQkeZxTtGOaLu2wBy\",\"separator\":\"_fU0EBXwmoeXiyoCMPCg\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isApiPeerChat, isOwnMessage,\n} from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <div className={styles.separator}>{lang('BoostingGiveawayMsgWithDivider')}</div>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIcon\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiReactionCount,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageKey, isReactionChosen, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../ui/Button';\n\nimport './Reactions.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  withRecentReactors?: boolean;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  withRecentReactors,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as ApiPeer[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen', 'message-reaction')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className=\"reaction-animated-emoji\"\n        containerId={getMessageKey(message)}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useSignal from '../../../hooks/useSignal';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageKey,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n  const hasText = hasMessageText(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasText ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { userId: storyReplyUserId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyUserId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded, Boolean(focusedQuote),\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            backgroundEmojiId={sender?.color?.backgroundEmojiId}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { userId: storyReplyUserId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage) : forwardHeader && !isRepliesChat\n      ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyUserId\n      ? selectPeerStory(global, storyReplyUserId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyUserId ? selectUser(global, storyReplyUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer, quote: focusedQuote,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.mainMessage.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\n\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { MouseEvent as ReactMouseEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiSponsoredMessage, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  peer?: ApiChat;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  peer,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    requestAppWebView,\n    startBot,\n    focusMessage,\n    openUrl,\n    openPremiumModal,\n    clickSponsoredMessage,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n  const withAvatar = Boolean(message?.isAvatarShown && peer);\n  const isBotApp = Boolean(message?.botApp);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!peer) {\n      return;\n    }\n\n    openChat({ id: peer.id });\n  });\n\n  const handleLinkClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.webPage!.url, shouldSkipModal: true });\n\n    return false;\n  });\n\n  const handleCloseSponsoredMessage = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n\n    if (isBotApp) {\n      const { shortName } = message.botApp!;\n      const theme = extractCurrentThemeParams();\n\n      requestAppWebView({\n        botId: message.chatId!,\n        appName: shortName,\n        startApp: message.startParam,\n        theme,\n      });\n    } else if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderAvatar() {\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={peer}\n        onClick={peer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderPhoto() {\n    if (message?.botApp) {\n      if (!message.botApp.photo) return undefined;\n\n      return (\n        <Avatar\n          size=\"large\"\n          peer={bot}\n          photo={message.botApp.photo}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    if (channel) {\n      return (\n        <Avatar\n          size=\"large\"\n          peer={channel}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderContent() {\n    if (message?.webPage) {\n      return (\n        <>\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <div className=\"message-title message-peer\" dir=\"ltr\">\n              {renderText(message.webPage.siteName)}\n            </div>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message!.text.text,\n                entities: message!.text.entities,\n              })}\n            </span>\n          </div>\n\n          <Button\n            className=\"SponsoredMessage__button\"\n            size=\"tiny\"\n            color=\"translucent\"\n            isRectangular\n            onClick={handleLinkClick}\n          >\n            <i className=\"icon icon-arrow-right\" aria-hidden />\n            {lang('OpenLink')}\n          </Button>\n        </>\n      );\n    }\n\n    const buttonText = message?.buttonText ?? (\n      isBotApp\n        ? lang('BotWebAppInstantViewOpen')\n        : (message!.isBot\n          ? lang('Conversation.ViewBot')\n          : lang(message!.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel')\n        ));\n    const title = isBotApp\n      ? message!.botApp!.title\n      : (bot\n        ? renderText(getUserFullName(bot) || '')\n        : (channel ? renderText(message!.chatInviteTitle || getChatTitle(lang, channel) || '') : '')\n      );\n\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  const contentClassName = buildClassName(\n    'message-content has-shadow has-solid-background has-appendix',\n    getPeerColorClass(bot || peer || channel),\n  );\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className={buildClassName('SponsoredMessage Message open', withAvatar && 'with-avatar')}\n    >\n      {withAvatar && renderAvatar()}\n      <div\n        className={contentClassName}\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <div className=\"content-inner\" dir=\"auto\">\n          {renderPhoto()}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n          </span>\n          {renderContent()}\n        </div>\n        <MessageAppendix />\n        <Button\n          className=\"message-action-button\"\n          color=\"translucent-white\"\n          round\n          size=\"tiny\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseSponsoredMessage}\n        >\n          <i className=\"icon icon-close\" aria-hidden />\n        </Button>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const peer = message?.chatId ? selectChat(global, message?.chatId) : undefined;\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      peer,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageHtmlId,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isSynced, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? threadId : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions?.results.length);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadId && messagesById[threadId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = threadId;\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? threadId : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    fetchChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels', title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    chatId,\n    currentUserId,\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasStoriesTab,\n    isChannel,\n    topicId,\n    similarChannels,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  useEffect(() => {\n    if (isChannel) {\n      fetchChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const similarChannels = selectSimilarChannelIds(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories));\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels,\n      isCurrentUserPremium,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3>{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3>{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || contentKey === HeaderContent.StoryStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZtWHQyTLrCmeNE53Hvd9\",\"noResults\":\"cuYFx3gorhlWaUcBJ0Aj\",\"section-header\":\"IPPwOeRGhyQDYbJsBsdb\",\"sectionHeader\":\"IPPwOeRGhyQDYbJsBsdb\",\"section\":\"HMySq6RoeqoKdRuUAW7z\",\"user\":\"hben8jCvRhcyebFweulH\",\"stats\":\"dBHHnaU4CZ9TELAykZyA\",\"down\":\"nlFBjRF9YGIjCHGrt2cp\",\"loadMoreSpinner\":\"QBMARpR7dewZog5QmOkh\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dateFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n}: StateProps) => {\n  const { openChat, loadMoreBoosters, closeBoostStatistics } = getActions();\n  const lang = useLang();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics?.count) return undefined;\n    const loadedCount = boostStatistics.boosterIds?.length || 0;\n    const totalCount = boostStatistics.count;\n    return totalCount - loadedCount;\n  }, [boostStatistics]);\n\n  const handleBoosterClick = useLastCallback((userId: string) => {\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters();\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={boosts.toString()}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          <div className={styles.section}>\n            <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('Boosters')}\n            </h4>\n            {!boostStatistics.boosterIds?.length && (\n              <div className={styles.noResults}>{lang('NoBoostersHint')}</div>\n            )}\n            {boostStatistics.boosterIds?.map((userId) => (\n              <ListItem\n                key={userId}\n                className=\"chat-item-clickable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleBoosterClick(userId)}\n              >\n                <PrivateChatInfo\n                  className={styles.user}\n                  forceShowSelf\n                  userId={userId}\n                  status={lang('BoostExpireOn', formatDateAtTime(lang, boostStatistics.boosters![userId] * 1000))}\n                />\n              </ListItem>\n            ))}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount)}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n\n    return {\n      boostStatistics,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { userIds, chatId } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !(userIds && chatId));\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from '../modals/boost/BoostModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport GiftCodeModal from '../modals/giftcode/GiftCodeModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport InviteViaLinkModal from './InviteViaLinkModal.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  boostModal?: TabState['boostModal'];\n  giftCodeModal?: TabState['giftCodeModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  inviteViaLinkModal?: TabState['inviteViaLinkModal'];\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  giftCodeModal,\n  boostModal,\n  noRightColumnAnimation,\n  isSynced,\n  inviteViaLinkModal,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadPremiumSetStickers,\n    loadAuthorizations,\n    loadPeerColors,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <BoostModal info={boostModal} />\n      <GiftCodeModal modal={giftCodeModal} />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <InviteViaLinkModal userIds={inviteViaLinkModal?.restrictedUserIds} chatId={inviteViaLinkModal?.chatId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      inviteViaLinkModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      inviteViaLinkModal,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","tabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","clearMessageTranslation","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","map","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","limit","users","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","set","IS_IOS","rafPromise","delete","payload","shouldForceRender","onError","isRestricted","viewportIds","isLocalMessageId","Boolean","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","draftReplyInfo","userId","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userFullName","getUserFullName","showNotification","translate","join","messageListType","selectEditingMessage","setEditingId","getMessageOriginalId","cancelApiProgress","apiUpdate","currentDraft","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","isUnread","minId","readCount","count","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","isDeepLink","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","selectForwardsCanBeSentToChat","isModalShown","openThread","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","link","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","accountChats","accountUsers","globalChats","globalUsers","localResults","chatIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","activeThreadId","currentChat","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","pick","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","attachMenu","bots","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","isFromConfirm","shouldDisplayDisclaimer","isDisclaimerNeeded","requestedAttachBotInstall","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","String","amount","field","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostsListResult","boostStatusResult","boosters","boosterIds","isLoadingBoosters","slots","newStatusResult","giftCodeModal","info","requestConfetti","closeGiftCodeModal","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","messageKey","getMessageKey","selectPerformanceSettingsValue","stopActiveReaction","containerId","startActiveReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","name","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","updateStoryViews","recentViewerIds","view","updatePeerStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentMessageId","currentStoryId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","fetchChatByUsername","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","archived","areStoriesHidden","storySourceProp","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","size","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","isForSideMenu","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","FloatingActionButtons","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","mainMessage","albumId","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","senderUserId","dividend","getPeerIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","containerRef","handleStickerSelect","StickerView","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","dpr","useDevicePixelRatio","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","EmbeddedStory","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","Album","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","AnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","CommentButton","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","Game","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","canPlayAnimatedEmojis","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","untilDate","prizeDescription","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","DisplayNames","countries","countryCode","isoToEmoji","of","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIcon","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","RE_TME_LINK","renderIcon","Invoice","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","InvoiceMediaPreview","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","Location","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","MessageMeta","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","isText","REACTION_SIZE","ReactionButton","withRecentReactors","recentReactors","recentReaction","isReactionChosen","ReactionAnimatedEmoji","AvatarList","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","RoundVideo","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","onEnded","onTimeUpdate","onReady","ProgressSpinner","Sticker","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","selectIsChatWithSelf","isRepliesChat","isChatWithRepliesBot","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyToPeerId","replyFrom","storyReplyUserId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasText","hasMessageText","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","replyToTopId","isQuote","quoteText","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","EmbeddedMessage","senderChat","forwardSender","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","DotAnimation","WebPage","backgroundEmojiId","onCancelMediaTransfer","MessageAppendix","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","SponsoredMessage","viewSponsoredMessage","openChatByInvite","requestAppWebView","startBot","clickSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","isAvatarShown","isBotApp","handleLinkClick","handleCloseSponsoredMessage","chatInviteHash","renderPhoto","isRecommended","siteName","isRectangular","chatInviteTitle","onAboutAds","MessageListContent","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","MessageList","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","backgroundColor","MessageSelectToolbar","ChatReportPanel","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","HeaderPinnedMessage","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","MiddleHeader","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","onUnpin","teactOrderKey","AttachBotInstallModal","BoostModal","ChatlistModal","modal","GiftCodeModal","MapModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","isOut","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannels","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","limitSimilarChannels","commonChatIds","Profile","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","fetchChannelRecommendations","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","ProfileState","MemberList","StoryList","SharedMedia","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","RightSearch","loadMoreBoosters","closeBoostStatistics","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","statsOverview","level","premiumSubscribers","boostersToLoadCount","loadedCount","handleBoosterClick","section","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","StatisticsOverview","sectionHeader","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","prevConfettiTime","hideTimeout","DeleteFolderDialog","DialogsAsync","Dialogs","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","DownloadUrl","baseURI","filename","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","InviteViaLinkModal","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPremiumSetStickers","loadPeerColors","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","stickerSetShortName","UnreadCount","restrictedUserIds","passcodeSettings","LockScreen","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}